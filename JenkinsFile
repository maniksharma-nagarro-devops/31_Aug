pipeline {
    agent any
    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven3"
    }
    // parameters {
    //     choice(name: 'ENVIRONMENT',
    //     choices: ['DEVELOPMENT', 'PRODUCTION'],
    //     description: 'Choose the Environment to Work On')
    // }

 

    stages {

        stage('Code checkout according to environment') {
            steps {
                script{
                    if(params.ENVIRONMENT=='DEVELOPMENT'){
                        checkout scmGit(branches: [[name: 'dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/mohd-arslan/assignement.git']])
                    }
                    else if(params.ENVIRONMENT=='PRODUCTION'){
                        checkout scmGit(branches: [[name: 'Prod']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/mohd-arslan/assignement.git']])
                    }
                    else{
                        error('Invalid choice')
                    }
                }
            }
        } 
        stage("Build the code"){
            steps{
                sh "ls -a"

 

                sh "mvn clean package"
            }

        }


        // stage("SonarQube Analysis")
        // {
        //     steps
        //     {
        //         withSonarQubeEnv("SonarQube")
        //         {
        //             sh 'mvn -f Assignment/pom.xml clean install sonar:sonar -Dsonar.projectKey=Pipeline-jenkins -Dsonar.projectName=Mini-assignment'
        //         }
        //     }
        // }

        // stage("Upload artifacts")
        // {
        //     steps
        //     {
        //         rtUpload(
        //             serverId: 'artifactory-server',
        //             spec:'''{
        //                 "files":[
        //                 {
        //                     "pattern": "*.war",
        //                     "target": "Jenkins-pipeline-repo/"
        //                 }
        //             ]
        //             }''',
        //             )
        //             rtPublishBuildInfo( serverId:"artifactory-server" )

        //     }
        // }

        stage('Deploy to artifactory'){
	    	   steps{
		          rtServer(
		            id: "artifactory-server"
		            )
		            rtUpload(
		                serverId: "artifactory-server",
		                spec: '''{
		                    "files":[
		                    {
		                        "pattern":"*.war",
		                        "target":"assignment"
		                     }
		                             ]
		            }'''
		        )
		        rtPublishBuildInfo(
		        serverId: "artifactory-server"
		        )
		   }
		}

        stage('create image for docker') {
            steps{
                sh 'docker build -t mohdarslan/bench_assignment .'
            }
        }

 

        stage('Run the container'){
            steps{
                script{
                    if(params.ENVIRONMENT=='DEVELOPMENT'){
                        def docker_container = sh(returnStdout: true, script: 'docker ps -a -f name="MiniAssignment_dev" -q')
                        if(docker_container)
                            {
                        sh "docker stop ${docker_container}"
                        sh "docker rm --force ${docker_container}"
                    }
                    sh 'docker run -d --name MiniAssignment_dev -p 8084:8080 mohdarslan/bench_assignment'
                    }
                    else if(params.ENVIRONMENT=='PRODUCTION'){
                        def docker_container = sh(returnStdout: true, script: 'docker ps -a -f name="MiniAssignment_prod" -q')
                        if(docker_container)
                            {
                        sh "docker stop ${docker_container}"
                        sh "docker rm --force ${docker_container}"
                    }
                    sh 'docker run -d --name MiniAssignment_prod -p 9090:8080 mohdarslan/bench_assignment'
                    }
                    else{
                        error('Kindly lookup the code')
                    }
            }
        }
    }
}
}
